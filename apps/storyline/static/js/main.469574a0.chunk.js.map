{"version":3,"sources":["components/Logline/index.js","utils/current-user.js","containers/Login/index.js","utils/apiutils.js","utils/apis.js","containers/App/index.js","HOCs/require-authentication.js","serviceWorker.js","index.js"],"names":["Option","Select","genreOptions","Typography","Title","subGenreOptions","Logline","props","setVisible","value","setState","visible","setFieldValue","path","prev","set","getShortLogline","logline","state","character","crisis","response","onSave","isEdit","onEdit","theme","genre","subGanre","title","this","className","type","onClick","subTitle","content","QuestionCircleOutlined","column","Item","label","TextField","onChange","ev","target","fullWidth","name","style","width","map","g","i","key","s","ghost","extra","size","onOk","onCancel","footer","height","src","frameborder","allow","allowfullscreen","React","Component","hasLoggedin","Login","placeholder","apiPathHelper","endPoint","host","window","location","hostname","healthCheck","fetch","then","res","text","console","log","catch","err","requireAuthentication","WrappedComponent","api","CurrentUser","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.469574a0.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {PageHeader, Descriptions, Select, Typography, Button, Modal, Popover} from 'antd';\nimport {QuestionCircleOutlined} from '@ant-design/icons'\nimport TextField from '@material-ui/core/TextField';\nimport set from 'lodash/set';\nimport './style.scss';\nconst {Option} = Select;\nconst {Title} = Typography;\nconst genreOptions = ['Action Adventure',\n    'Thriller',\n   'Romantic Comedy',\n    'Horror',\n    'Drama',\n    'Romantic Drama',\n    'Mystery',\n    'Science Fiction',\n    'Horror',\n    'Love Story',\n    'Family',\n    'Fantasy',\n    'Animation',\n    'Western',\n    'Period',\n    'Historical',\n    'Musical'];\nconst subGenreOptions = ['None',\n    'Comedy',\n    'Horror',\n    'Drama',\n    'Thriller',\n    'Family',\n    'Psychological',\n    'Political',\n    'Parody',\n    'Farce',\n    'Slapstick',\n    'Dark',\n    'Epic',\n    'True Story',\n    'Suspense',\n    'Erotic',\n    'Fish-out-of water',\n    'Coming-of-age'];\nclass Logline extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            logline: {\n                character: \"\",\n                crisis: \"\",\n                response: \"\",\n            },\n            theme: \"\",\n            genre: genreOptions[0],\n            subGanre: subGenreOptions[0],\n            title: \"\",\n            isEdit: true,\n        }\n    }\n    \n    setVisible = (value) => {\n        this.setState({visible: value})\n    }\n    setFieldValue = (path, value) => {\n        this.setState((prev) => {\n            const newState = set(prev, path, value);\n            return newState\n        });\n    }\n    getShortLogline = () => {\n        const {logline} = this.state;\n        return `${logline.character} ${logline.crisis} ${logline.response}`\n    }\n    onSave = () => {\n        this.setState({isEdit: false})\n    }\n    onEdit = () => {\n        this.setState({isEdit: true})\n    }\n    render() {\n    const {logline, visible, theme, genre, subGanre, title, isEdit} = this.state;\n    const {setVisible, setFieldValue} = this;\n    return (<div className=\"logline-container\">\n        <Button type=\"link\" onClick={() => setVisible(true)}>\n            How to write a logline\n        </Button>\n        {isEdit ? \n            <div className=\"logline-create\">\n            <div>\n                <PageHeader\n                    title={\"1. Your Story Idea\"}\n                    subTitle={<Popover content=\"These three questions will get at the guts of your story. Sentence length is limited - if you find you can't add more letters, use fewer or shorter words.\"><QuestionCircleOutlined /></Popover>}>\n                        <Descriptions  column={1}>\n                            <Descriptions.Item label={<div>a. Your main character <Popover content={<div>(use adjectives, emotional state) who wants x (a basic desire) <div>E.g., A shy young suburban boy who wants to be noticed</div></div>}><QuestionCircleOutlined /></Popover></div> }/>\n                                \n                            <Descriptions.Item><TextField value={logline.character} onChange={(ev) => setFieldValue('logline.character', ev.target.value)} fullWidth/></Descriptions.Item>\n                            <Descriptions.Item label={<div>b. Crisis <Popover content={<div>what crisis he/she/are they facing ? <div>Hint: Start with an ACTIVE VERB.</div> <div>E.g., discovers a strange but friendly alien living in his shed</div></div>}><QuestionCircleOutlined/></Popover></div>}/>\n                                \n                            <Descriptions.Item><TextField value={logline.crisis} onChange={(ev) => setFieldValue('logline.crisis', ev.target.value)} fullWidth /></Descriptions.Item>\n                            <Descriptions.Item label={<div>c. Response <Popover content={<div>How does he/she/do they respond to try and deal with it ? <div>Hint: Not too much detail.</div><div>E.g., and tries to help him get home while keeping his existence a secret. (E.T., The Extra Terrestrial)</div></div>}><QuestionCircleOutlined/></Popover></div>}/>\n                                \n                            <Descriptions.Item><TextField value={logline.response} onChange={(ev) => setFieldValue('logline.response', ev.target.value)} fullWidth/></Descriptions.Item>\n                        </Descriptions>\n                </PageHeader>\n\n                \n            </div>\n\n            <div>\n                <PageHeader\n                    title={\"2. What type of film is it?\"}\n            >\n                <Descriptions  column={1}>\n                    <Descriptions.Item label=\"Genre\">\n                            <Select name=\"Genre\" value={genre} style={{ width: 200 }} onChange={(value) => setFieldValue('genre', value)} >\n                                {genreOptions.map((g,i )=> <Option key={`genre-${i}`} value={g}>{g}</Option>)}\n\t                        </Select>           \n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"Sub-Genre\">\n                        <Select name=\"Sub-Genre\" value={subGanre} style={{ width: 200 }} onChange={(value) => setFieldValue('subGanre', value)} >\n                            {subGenreOptions.map((s,i) => <Option key={`sub-genre-${i}`} value={s}>{s}</Option>)}\n                        </Select>\n                    </Descriptions.Item>\n                    \n                </Descriptions>\n            </PageHeader>\n        </div>\n            <div>\n            <PageHeader\n                    title={\"3. Your Theme\"}\n                    subTitle={<Popover content={<div>THEME is what people want to know when they ask that annoying question, \"So what's it about?\" <div>Make it a one word answer, as corny as it may sound, like Love, Betrayal, or Prejudice. Philadelphia, for example is a story about prejudice; Star Wars is a story about heroism.</div></div>}><QuestionCircleOutlined/></Popover>}\n            >\n                <Descriptions  column={1}>\n                            <Descriptions.Item>\n                                <TextField value={theme} onChange={(ev) => setFieldValue('theme', ev.target.value)} fullWidth />\n                            </Descriptions.Item>\n                </Descriptions>\n            </PageHeader>\n                \n\n                </div>\n\n                \n           \n        <div>\n            <PageHeader\n                    title={<div>4. Your Title </div>}\n                    subTitle={<Popover content=\"Based on your theme, choose a title (for now).\"><QuestionCircleOutlined /></Popover>}\n            >\n                <Descriptions  column={1}>\n                            <Descriptions.Item>\n                                <TextField value={title} onChange={(ev) => setFieldValue('title', ev.target.value)} fullWidth/>\n                            </Descriptions.Item>\n                            <Descriptions.Item>\n                                <Button onClick={this.onSave} type=\"primary\">Save</Button>\n                            </Descriptions.Item>\n                </Descriptions>\n            </PageHeader>\n            </div>\n        \n            {/* <EditableDiv placeholder=\"describe the story\" {...props} value={props.content[props.id]}/> */}\n        </div>\n        : \n            <div className='logline-view'>\n                <PageHeader\n                    ghost={false}\n                    title={title}\n                    extra={[\n                        \n                        <Button key=\"2\">Print</Button>,\n                        <Button key=\"1\" type=\"primary\" onClick={this.onEdit}>\n                        Edit\n                        </Button>,\n                    ]}\n                    >\n            <Descriptions size=\"small\" column={1}>\n                <Descriptions.Item label=\"Logline (elivator pitch)\">\n                    {this.getShortLogline()}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Theme\">\n                    {theme}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Genre\">\n                    {genre}, {subGanre}\n                </Descriptions.Item>\n            </Descriptions>\n            <Descriptions size=\"small\" column={2}>\n                <Descriptions.Item label=\"Writer(s)\">name of user</Descriptions.Item>\n                <Descriptions.Item label=\"Last modified\">2017-01-10</Descriptions.Item>\n                \n            </Descriptions>\n            </PageHeader>\n            </div>\n    }\n    <Modal\n          title=\"How to write log line\"\n          visible={visible}\n          onOk={() => setVisible(false)}\n          onCancel={() => setVisible(false)}\n          width={600}\n          footer={null}\n        >\n                  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/r0Fj_H9Q73k\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n    </Modal>\n    </div>)\n\n    }\n}\nexport default Logline;","function hasLoggedin() {\n    return true;\n}\nexport default {\n    hasLoggedin\n}","import React from 'react';\nexport default function Login() {\n    return <div>\n        <div><input placeholder=\"username\"></input></div>\n        <div><input type=\"password\" placeholder=\"password\"></input></div>\n        <div><button>Login</button></div>\n    </div>\n}","export const apiPathHelper = function(endPoint) {\n    const apiPort = '8000';\n    const host = window.location.hostname;\n    const urlScheme = 'http'; //needs to be changed to https\n    return `${urlScheme}://${host}:${apiPort}/${endPoint}`\n}\nexport default {\n    apiPathHelper\n}","import {apiPathHelper} from './apiutils'\nconst healthCheck = () => {\n    const path = apiPathHelper('api/healthCheck')\n    fetch(path).then((res) => res.text()).then((res)=>{\n        console.log(res)\n    }).catch(err => console.log(err))\n} \nexport default healthCheck;","import React from 'react';\nimport './App.scss';\nimport Logline from '../../components/Logline';\nimport requireAuthentication from '../../HOCs/require-authentication';\nimport api from '../../utils/apis';\nfunction App () {\n  api();\n  return <div className=\"App\">\n            <header className=\"App-header center\">\n              Storyline\n            </header>\n            <div className=\"App-container\">\n                <Logline/>\n            </div>\n        </div>\n}\n\nexport default requireAuthentication(App);\n","import React from 'react';\nimport CurrentUser from '../utils/current-user';\nimport Login from '../containers/Login';\n\nexport default function RequireAuthentication(WrappedComponent) {\n  return function(props) {\n    const user = CurrentUser.hasLoggedin();\n    if (user) {\n      return <WrappedComponent {...props} />;\n    }\n\n    return <Login />;\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css'; \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}